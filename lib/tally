#!/bin/bash

# This program is free software. It comes without any warranty, to the
# extent permitted by applicable law. You can redistribute it and/or modify
# it under the terms of the Do What The Fuck You Want To Public License,
# Version 2, as published by Sam Hocevar. See WTFPL.txt or
# http://www.wtfpl.net/ for more details.


# In interactive mode, prompt the user and write to the tab.
# 
# In noninteractive mode, read the tab and report the current tally.
function tally() {
  TALLY="${TALLY:-0}"
  if interactive; then
    output "Hit enter at the food prompt to finish."
  fi
  while 
    if interactive; then 
      prompt "    Food:  "
    fi
    read FOOD
  do
    # Finish if no food is specified.
    if [ "${FOOD}" == "" ]
    then
      break
    fi

    # Check for new food.
    if [ ! -f state/foods/"${FOOD}" ]
    then
      if interactive; then
        output "Unknown food.  Please define."
        output
        new_food "${FOOD}"
        output
      else
        fail "Unknown food:  ${FOOD}"
      fi
    fi

    if interactive; then
      prompt "Servings:  "
    fi
    read SERVINGS

    # Check validity of input.
    ORIGINAL_SERVINGS="${SERVINGS}"
    eval SERVINGS=$(distill "${SERVINGS}")
    if [ "${SERVINGS}" == "" ]
    then
      fail "Invalid number of servings of ${FOOD}.  (${ORIGINAL_SERVINGS})"
    fi

    # Get points per serving.
    POINTS_PER_SERVING=$(cat state/foods/"${FOOD}")

    # Do the math.
    POINTS=$(
      bc <<< "scale=3; ${POINTS_PER_SERVING} * ${SERVINGS}"
    )

    TALLY=$(
      bc <<< "scale=3; ${TALLY} + ${POINTS}"
    )

    if interactive; then
      # Output.
      output "  Points:  ${POINTS}"
      output "   Tally:  ${TALLY}"
      output
      # Log.
      printf '%s\n' "${FOOD}" >> "${TAB}"
      printf '%s\n' "${SERVINGS}" >> "${TAB}"
    fi

  done
  
  if interactive; then
    output "   Tally:  ${TALLY}"
  else
    printf "%s\n" "${TALLY}"
  fi
}
