#!/bin/bash

# This program is free software. It comes without any warranty, to the
# extent permitted by applicable law. You can redistribute it and/or modify
# it under the terms of the Do What The Fuck You Want To Public License,
# Version 2, as published by Sam Hocevar. See WTFPL.txt or
# http://www.wtfpl.net/ for more details.


# Tally up the log, then take new input from the user.
function tally_then_tally() {
    tally=0
    if [ -f "${log}" ]; then
      tally="$(NONINTERACTIVE='y' tally < "${log}")" \
        || fail "Failed to tally existing tab."
    fi
    tally
}


# In interactive mode, prompt the user and write to the tab.
# 
# In noninteractive mode, read the tab and report the current tally.
function tally() {
  tally="${tally:-0}"
  if interactive; then
    output "Hit enter at the food prompt to finish."
    output "Tally:" "${tally}"
  fi
  while 
    if interactive; then 
      prompt "Food:"
    fi
    read food
  do
    # Finish if no food is specified.
    if [ "${food}" == "" ]
    then
      break
    fi

    # Check for new food.
    if [ ! -f "${foods}"/"${food}" ]
    then
      if interactive; then
        output "Unknown food.  Please define."
        new_food "${food}"
      else
        fail "Unknown food:  ${food}"
      fi
    fi

    # Get points per serving.
    points_per_serving=$(cat "${foods}"/"${food}") \
      || fail "Failed to get points per serving."
    if interactive; then
      output "Points per serving:" "${points_per_serving}"
      prompt "Servings:"
    fi
    read servings

    # Check validity of input.
    original_servings="${servings}"
    eval servings=$(distill "${servings}")
    if [ "${servings}" == "" ]
    then
      fail "Invalid number of servings of ${food}.  (${original_servings})"
    fi

    # Do the math.
    points=$(
      bc <<< "scale=3; ${points_per_serving} * ${servings}"
    )

    tally=$(
      bc <<< "scale=3; ${tally} + ${points}"
    )

    if interactive; then
      # Output.
      output "Points per serving:" "${points}"
      output "Tally:" "${tally}"
      # Log.
      printf '%s\n' "${food}" >> "${log}"
      printf '%s\n' "${servings}" >> "${log}"
    fi

  done
  
  if ! interactive; then
    printf "%s\n" "${tally}"
  fi
}
