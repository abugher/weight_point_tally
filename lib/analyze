#!/bin/bash

# This program is free software. It comes without any warranty, to the
# extent permitted by applicable law. You can redistribute it and/or modify
# it under the terms of the Do What The Fuck You Want To Public License,
# Version 2, as published by Sam Hocevar. See WTFPL.txt or
# http://www.wtfpl.net/ for more details.

include mkstate
include sync_state
include distill
include calculate
include analyze_day
include output
include fail
include warn
include warn
include config


function analyze() {
  mkstate
  sync_state
  foods=()
  days=()
  points_by_day=()
  points_by_food=()
  points_total=0
  weights_by_day=()
  unset weight_start
  d=0
  while read day; do
    days["${d}"]="${day}"
    if test -e "${state}/weights/${day}"; then
      weights_by_day["${d}"]="$(
        distill "$(< "${state}/weights/${day}")"
      )" || fail "Failed to read weight for day:" "${day}"
      weight_start="${weight_start:-${weights_by_day["${d}"]}}"
      weight_end="${weights_by_day["${d}"]}"
    else
      warn "Missing weight for day:" "${day}"
    fi
    while read food; do
      read points
      if ! grep -qE '^[-0-9.]+$' <<< "${points}"; then
        fail "Invalid number of points for '${food}':" "'${points}'"
      fi
      points_by_day["${d}"]="$(
        calculate "${points_by_day["${d}"]:-0} + ${points}"
      )" || fail "Failed to calculate points by day."
      points_total="$(
        calculate "${points_total} + ${points}"
      )" || fail "Failed to calculate points total."
      f=0
      for compiled_food in "${foods[@]}"; do
        if test "${compiled_food}" = "${food}"; then
          break 1
        fi
        f="$(( f + 1 ))"
      done
      if test "${#foods[@]}" = "${f}"; then
        foods["${f}"]="${food}"
      fi
      points_by_food["${f}"]="$(
        calculate "${points_by_food["${f}"]:-0} + ${points}"
      )" || fail "Failed to calculate points by food."
    done < <(
      ( analyze_day < "${state}/days/${day}" ) \
        || printf 'failure token\nfailure token\nfailure token\n'  # Cheap hack to induce parse failure.
    )
    d="$(( d + 1 ))"
  done < <(ls "${state}/days/" | sort)
  average="$(
    calculate "${points_total} / ${#days[@]}"
  )" || fail "Failed to calculate average points."
  output "Number of days:" "${#days[@]}"
  output "Average points in total per day:" "${average}"
  weight_diff="$(calculate "${weight_end} - ${weight_start}")"
  output "Total change in weight:" "${weight_diff}"
  weight_diff_average="$(calculate "${weight_diff} / ${#days[@]}")" # Assumes weight was measured at first recorded day.
  output "Average change in weight per day:" "${weight_diff_average}"
  output
  output "Average points per food per day:"
  f=0
  for food in "${foods[@]}"; do
    average="$(calculate "${points_by_food["${f}"]} / ${#days[@]}")" \
      || fail "Failed to calculate average points per day for food:" "${food}"
    output "${food}:" "${average}"
    f="$(( f + 1 ))"
  done \
    | sort -n -t : -k 3  # Assumes no food names contain a colon.  Assumes one colon in prefix.
  sync_state
}

